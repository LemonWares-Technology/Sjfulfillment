import { NextRequest, NextResponse } from 'next/server'
import { JWTPayload } from '@/app/lib/auth'
import { createErrorResponse, withRole } from '@/app/lib/api-utils'
import { prisma } from '@/app/lib/prisma'
import jsPDF from 'jspdf'

// GET /api/analytics/comprehensive-report
export const GET = withRole(['SJFS_ADMIN'], async (request: NextRequest, user: JWTPayload) => {
  try {
    const { searchParams } = new URL(request.url)
    const startDate = searchParams.get('start') || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()
    const endDate = searchParams.get('end') || new Date().toISOString()
    const format = searchParams.get('format') || 'pdf'

    const start = new Date(startDate)
    const end = new Date(endDate)
    end.setHours(23, 59, 59, 999)

    // Get comprehensive data
    const [
      merchants,
      orders,
      products,
      customers,
      logisticsPartners,
      subscriptions,
      serviceSubscriptions
    ] = await Promise.all([
      prisma.merchant.count(),
      prisma.order.findMany({
        where: {
          createdAt: { gte: start, lte: end }
        }
      }),
      prisma.product.count(),
      prisma.order.groupBy({
        by: ['customerEmail'],
        where: {
          customerEmail: { not: null }
        }
      }).then(result => result.length),
      prisma.logisticsPartner.count(),
      prisma.service.count(),
      prisma.merchantServiceSubscription.count()
    ])

    const totalMerchants = merchants
    const totalOrders = orders.length
    const totalRevenueAmount = orders.reduce((sum, order) => sum + Number(order.totalAmount), 0)
    const totalProducts = products
    const totalCustomers = customers
    const deliveredOrders = orders.filter(o => o.status === 'DELIVERED').length
    const pendingOrders = orders.filter(o => ['PENDING', 'PROCESSING'].includes(o.status)).length
    const returnedOrders = orders.filter(o => o.status === 'RETURNED').length

    // Generate comprehensive report
    if (format === 'pdf') {
      const pdfBuffer = await generateComprehensivePdf(
        totalMerchants, totalOrders, totalRevenueAmount, totalProducts, totalCustomers,
        merchants, orders, products, customers, logisticsPartners, subscriptions, serviceSubscriptions,
        deliveredOrders, pendingOrders, returnedOrders, startDate, endDate
      )
      return new NextResponse(pdfBuffer as any, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="sjf-comprehensive-report-${startDate.split('T')[0]}-to-${endDate.split('T')[0]}.pdf"`
        }
      })
    }

    return createErrorResponse('Unsupported format', 400)

  } catch (error) {
    console.error('Comprehensive report error:', error)
    return createErrorResponse('Failed to generate comprehensive report', 500)
  }
})

async function generateComprehensivePdf(
  totalMerchants: number, totalOrders: number, totalRevenueAmount: number, totalProducts: number, totalCustomers: number,
  merchants: any[], orders: any[], products: any[], customers: any[], logisticsPartners: any[], subscriptions: any[], serviceSubscriptions: any[],
  deliveredOrders: number, pendingOrders: number, returnedOrders: number, startDate: string, endDate: string
) {
  try {
    const doc = new jsPDF()
    
    // Title
    doc.setFontSize(20)
    doc.text('Comprehensive Analytics Report', 20, 20)
    
    // Date range
    doc.setFontSize(12)
    doc.text(`Period: ${startDate} to ${endDate}`, 20, 35)
    
    // Summary
    doc.setFontSize(14)
    doc.text('Platform Summary', 20, 55)
    
    doc.setFontSize(10)
    doc.text(`Total Merchants: ${totalMerchants}`, 20, 70)
    doc.text(`Total Orders: ${totalOrders}`, 20, 80)
    doc.text(`Total Revenue: â‚¦${totalRevenueAmount.toLocaleString()}`, 20, 90)
    doc.text(`Total Products: ${totalProducts}`, 20, 100)
    doc.text(`Total Customers: ${totalCustomers}`, 20, 110)
    
    // Order status breakdown
    doc.setFontSize(14)
    doc.text('Order Status Breakdown', 20, 130)
    
    doc.setFontSize(10)
    doc.text(`Delivered: ${deliveredOrders}`, 20, 145)
    doc.text(`Pending: ${pendingOrders}`, 20, 155)
    doc.text(`Returned: ${returnedOrders}`, 20, 165)

    // Footer
    doc.setFontSize(8)
    doc.text('Generated by SJ Fulfillment Platform', 20, 280)
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 290)
    
    return Buffer.from(doc.output('arraybuffer'))
  } catch (error) {
    console.error('PDF generation error:', error)
    throw error
  }
}