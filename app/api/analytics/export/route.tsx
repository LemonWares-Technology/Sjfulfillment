import { NextRequest, NextResponse } from 'next/server'
import { JWTPayload } from '@/app/lib/auth'
import { createErrorResponse, withRole } from '@/app/lib/api-utils'
import { prisma } from '@/app/lib/prisma'
import jsPDF from 'jspdf'


// GET /api/analytics/export
export const GET = withRole(['SJFS_ADMIN', 'MERCHANT_ADMIN'], async (request: NextRequest, user: JWTPayload) => {
  try {
    const { searchParams } = new URL(request.url)
    const startDate = searchParams.get('start') || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
    const endDate = searchParams.get('end') || new Date().toISOString().split('T')[0]
    const format = searchParams.get('format') || 'pdf'
    const type = searchParams.get('type') || 'general'

    // Get orders data
    const orders = await prisma.order.findMany({
      where: {
        createdAt: {
          gte: new Date(startDate),
          lte: new Date(endDate + 'T23:59:59.999Z')
        },
        ...(user.role !== 'SJFS_ADMIN' && { merchantId: user.merchantId })
      },
      include: {
        orderItems: {
          include: {
            product: {
              select: {
                name: true,
                sku: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    // Get products data
    const products = await prisma.product.findMany({
      where: {
        ...(user.role !== 'SJFS_ADMIN' && { merchantId: user.merchantId })
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    if (format === 'pdf') {
      const pdfBuffer = await generateAnalyticsPdf(orders, products, startDate, endDate)
      
      return new NextResponse(pdfBuffer, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="analytics-report-${startDate}-to-${endDate}.pdf"`
        }
      })
    }

    return createErrorResponse('Unsupported format', 400)

  } catch (error) {
    console.error('Error generating analytics export:', error)
    return createErrorResponse('Error generating analytics export', 500)
  }
})

async function generateAnalyticsPdf(orders: any[], products: any[], startDate: string, endDate: string) {
  try {
    const doc = new jsPDF()
    
    // Title
    doc.setFontSize(20)
    doc.text('Analytics Report', 20, 20)
    
    // Date range
    doc.setFontSize(12)
    doc.text(`Period: ${startDate} to ${endDate}`, 20, 35)
    
    // Summary
    doc.setFontSize(14)
    doc.text('Summary', 20, 55)
    
    const totalRevenue = orders.reduce((sum, order) => sum + Number(order.totalAmount), 0)
    const activeProducts = products.filter(p => p.isActive).length
    
    doc.setFontSize(10)
    doc.text(`Total Orders: ${orders.length}`, 20, 70)
    doc.text(`Total Revenue: ₦${totalRevenue.toLocaleString()}`, 20, 80)
    doc.text(`Total Products: ${products.length}`, 20, 90)
    doc.text(`Active Products: ${activeProducts}`, 20, 100)
    
    // Orders table
    doc.setFontSize(14)
    doc.text('Recent Orders', 20, 120)
    
    doc.setFontSize(8)
    let y = 135
    orders.slice(0, 20).forEach((order: any) => {
      doc.text(`${order.orderNumber} - ${order.customerName} - ₦${order.totalAmount}`, 20, y)
      y += 8
    })
    
    // Footer
    doc.setFontSize(8)
    doc.text('Generated by SJ Fulfillment Platform', 20, 280)
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 290)
    
    return Buffer.from(doc.output('arraybuffer'))
  } catch (error) {
    console.error('PDF generation error:', error)
    throw error
  }
}