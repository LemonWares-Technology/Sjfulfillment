import { NextRequest, NextResponse } from 'next/server'
import { JWTPayload } from '@/app/lib/auth'
import { createErrorResponse, createResponse, withRole } from '@/app/lib/api-utils'
import { prisma } from '@/app/lib/prisma'
import jsPDF from 'jspdf'

// GET /api/orders/[id]/receipt
export const GET = withRole(
  ["SJFS_ADMIN", "MERCHANT_ADMIN", "MERCHANT_STAFF", "WAREHOUSE_STAFF"],
  async (request: NextRequest, user: JWTPayload, { params }: { params: Promise<{ id: string }> }) => {
    try {
      const { id: orderId } = await params

      // Get order details
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          merchant: {
            select: {
              businessName: true,
              businessEmail: true,
              businessPhone: true,
              address: true,
              city: true,
              state: true,
              country: true
            }
          },
          orderItems: {
            include: {
              product: {
                select: {
                  name: true,
                  sku: true,
                  unitPrice: true
                }
              }
            }
          }
        }
      })

      if (!order) {
        return createErrorResponse('Order not found', 404)
      }

      // Check access permissions
      if (user.role !== 'SJFS_ADMIN' && order.merchantId !== user.merchantId) {
        return createErrorResponse('Access denied', 403)
      }

      // Generate receipt document
      console.log('Generating receipt for order:', order.orderNumber)
      const receiptBuffer = await generateReceiptDocument(order)
      console.log('Receipt generated successfully, buffer size:', receiptBuffer.length)

      // Log receipt generation
      await prisma.auditLog.create({
        data: {
          user: {
            connect: { id: user.userId }
          },
          action: 'GENERATE_RECEIPT',
          entityType: 'Order',
          entityId: orderId,
          newValues: {
            orderNumber: order.orderNumber,
            customerEmail: order.customerEmail,
            totalAmount: order.totalAmount,
            generatedAt: new Date().toISOString()
          }
        }
      })

      return new NextResponse(receiptBuffer as any, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="receipt-${order.orderNumber}.pdf"`,
          'Content-Length': receiptBuffer.length.toString()
        }
      })

    } catch (error) {
      console.error('Receipt generation error:', error)
      return createErrorResponse('Failed to generate receipt', 500)
    }
  }
)

async function generateReceiptDocument(order: any): Promise<Buffer> {
  try {
    const doc = new jsPDF()
    
    // Title
    doc.setFontSize(20)
    doc.text('SJ FULFILLMENT', 20, 20)
    
    doc.setFontSize(16)
    doc.text('ORDER RECEIPT / INVOICE', 20, 35)
    
    // Order Details
    doc.setFontSize(14)
    doc.text('Order Details', 20, 55)
    
    doc.setFontSize(10)
    doc.text(`Order Number: ${order.orderNumber}`, 20, 70)
    doc.text(`Order Date: ${new Date(order.createdAt).toLocaleDateString()}`, 20, 80)
    doc.text(`Status: ${order.status}`, 20, 90)
    
    // Customer Information
    doc.setFontSize(14)
    doc.text('Customer Information', 20, 110)
    
    doc.setFontSize(10)
    doc.text(`Name: ${order.customerName}`, 20, 125)
    doc.text(`Email: ${order.customerEmail}`, 20, 135)
    doc.text(`Phone: ${order.customerPhone || 'N/A'}`, 20, 145)
    
    // Items
    doc.setFontSize(14)
    doc.text('Order Items', 20, 165)
    
    doc.setFontSize(10)
    let y = 180
    order.orderItems.forEach((item: any) => {
      doc.text(`${item.product.name} - Qty: ${item.quantity} - NGN ${item.totalPrice}`, 20, y)
      y += 10
    })
    
    // Total
    doc.setFontSize(14)
    doc.text(`Total: NGN ${Number(order.totalAmount).toLocaleString()}`, 20, y + 20)
    
    // Footer
    doc.setFontSize(8)
    doc.text('Generated by SJ Fulfillment Platform', 20, 280)
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 290)
    
    return Buffer.from(doc.output('arraybuffer'))
  } catch (error) {
    console.error('PDF generation error:', error)
    throw error
  }
}

